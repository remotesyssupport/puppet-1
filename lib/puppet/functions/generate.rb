# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
# Runs an external command and returns the results
# ---- original file header ----
#
# @summary
#   Calls an external command on the Puppet master and returns
#    the results of the command.  Any arguments are passed to the external command as
#    arguments.  If the generator does not exit with return code of 0,
#    the generator is considered to have failed and a parse error is
#    thrown.  Generators can only have file separators, alphanumerics, dashes,
#    and periods in them.  This function will attempt to protect you from
#    malicious generator calls (e.g., those with '..' in them), but it can
#    never be entirely safe.  No subshell is used to execute
#    generators, so all shell metacharacters are passed directly to
#    the generator.
#
Puppet::Functions.create_function(:'generate') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

      raise Puppet::ParseError, "Generators must be fully qualified" unless args[0] =~ /^#{File::SEPARATOR}/

      unless args[0] =~ /^[-#{File::SEPARATOR}\w.]+$/
        raise Puppet::ParseError,
          "Generators can only contain alphanumerics, file separators, and dashes"
      end

      if args[0] =~ /\.\./
        raise Puppet::ParseError,
          "Can not use generators with '..' in them."
      end

      begin
        Dir.chdir(File.dirname(args[0])) { Puppet::Util.execute(args) }
      rescue Puppet::ExecutionFailure => detail
        raise Puppet::ParseError, "Failed to execute generator #{args[0]}: #{detail}"
      end

  end
end
