# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
require 'puppet/util/package'


# ---- original file header ----
#
# @summary
#   Compares two versions
#
#Prototype:
#
#    $result = versioncmp(a, b)
#
#Where a and b are arbitrary version strings
#
#This functions returns a number:
#
#* > 0 if version a is greater than version b
#* == 0 if both version are equals
#* < 0 if version a is less than version b
#
#Example:
#
#    if versioncmp('2.6-1', '2.4.5') > 0 {
#        notice('2.6-1 is > than 2.4.5')
#    }
#
#
#
Puppet::Functions.create_function(:'versioncmp') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

  unless args.length == 2
    raise Puppet::ParseError, "versioncmp should have 2 arguments"
  end

  return Puppet::Util::Package.versioncmp(args[0], args[1])

  end
end
