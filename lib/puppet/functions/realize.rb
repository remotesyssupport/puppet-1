# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
# This is just syntactic sugar for a collection, although it will generally
# be a good bit faster.

# ---- original file header ----
#
# @summary
#   Make a virtual object real.  This is useful
#    when you want to know the name of the virtual object and don't want to
#    bother with a full collection.  It is slightly faster than a collection,
#    and, of course, is a bit shorter.  You must pass the object using a
#    reference; e.g.: `realize User[luke]`.
#
Puppet::Functions.create_function(:'realize') do
  # @param vals
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :vals
  end


  def default_impl(*vals)
    
    coll = Puppet::Parser::Collector.new(self, :nomatter, nil, nil, :virtual)
    vals = [vals] unless vals.is_a?(Array)
    coll.resources = vals.flatten

    compiler.add_collection(coll)

  end
end
